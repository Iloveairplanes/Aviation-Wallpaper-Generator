import { GoogleGenAI, Modality } from "@google/genai";

if (!process.env.API_KEY) {
    throw new Error("API_KEY environment variable is not set");
}

const ai = new GoogleGenAI({ apiKey: process.env.API_KEY });

const MimeType = "image/jpeg";

/**
 * Generates an aviation-themed wallpaper using the Imagen model with a dynamic aspect ratio.
 * @param prompt - The user's text prompt.
 * @param aspectRatio - The desired aspect ratio string (e.g., '16:9', '9:16').
 * @returns A promise that resolves to an object containing the base64 encoded image and its mime type.
 */
export const generateWallpaper = async (prompt: string, aspectRatio: string): Promise<{ base64: string; mimeType: string; }> => {
    try {
        const fullPrompt = `High-resolution, photorealistic, ${aspectRatio} cinematic aviation wallpaper of: ${prompt}.`;
        const response = await ai.models.generateImages({
            model: 'imagen-4.0-generate-001',
            prompt: fullPrompt,
            config: {
              numberOfImages: 1,
              outputMimeType: MimeType,
              aspectRatio: aspectRatio as "1:1" | "16:9" | "9:16" | "4:3" | "3:4", // Cast to the supported types
            },
        });

        if (response.generatedImages && response.generatedImages.length > 0) {
            const image = response.generatedImages[0];
            if (image.image?.imageBytes) {
                return { base64: image.image.imageBytes, mimeType: MimeType };
            }
        }
        throw new Error('No image was generated by the API.');

    } catch (error) {
        console.error("Error generating wallpaper:", error);
        throw new Error("Failed to generate wallpaper. Please check your prompt and API key.");
    }
};

/**
 * Edits an existing image using a text prompt with the Gemini Flash Image model.
 * @param base64Image - The base64 encoded string of the image to edit.
 * @param mimeType - The MIME type of the image to edit.
 * @param prompt - The user's text prompt for the edit.
 * @returns A promise that resolves to an object containing the base64 encoded edited image and its mime type.
 */
export const editWallpaper = async (base64Image: string, mimeType: string, prompt: string): Promise<{ base64: string; mimeType: string; }> => {
    try {
        const response = await ai.models.generateContent({
            model: 'gemini-2.5-flash-image',
            contents: {
              parts: [
                {
                  inlineData: {
                    data: base64Image,
                    mimeType: mimeType,
                  },
                },
                {
                  text: prompt,
                },
              ],
            },
            config: {
                responseModalities: [Modality.IMAGE],
            },
        });
        
        for (const part of response.candidates[0].content.parts) {
            if (part.inlineData) {
                return { base64: part.inlineData.data, mimeType: part.inlineData.mimeType };
            }
        }
        throw new Error('No edited image was returned by the API.');

    } catch (error) {
        console.error("Error editing wallpaper:", error);
        throw new Error("Failed to edit wallpaper. The model may not have been able to apply the requested edit.");
    }
};